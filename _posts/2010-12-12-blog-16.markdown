---
layout: post
title: 《代码大全2》读书心得
date: 2010-12-12 21:12
comments: true
author: Peter.Y
categories: common
---

* content
{:toc}



花了近2个月的时间，看完了这本《代码大全》第二版。真是一本好书哇，看完之后觉得还有很多值得回味的地方，而且每部分之后作者还推荐了不少经典书籍。所以，作个读书心得，备查。

全书的主题是软件构建，关于软件构建问题的方方面面均有涉及，共分7个部分，从软件构建前期准备，到语言层的一些问题，再到代码完善，系统考虑以及软件工艺等等。以下分别进行简单说明。

 

第一部分是打好基础，本部分主要是软件构建前期的工作，以及对一些基本概念的介绍，具体包括如何选择编程语言和构建实践方法，如何理解软件开发的过程。软件开发本质上说就是工程，书中用建筑工程对其作比喻。不过由于软件产品本身的特性，使其需求产生变化的可能性很大，因而也产生一系列需要额外考虑的问题（否则的话，直接套用现在的工程方法就OK了）。

 

第二部分是创建高质量的程序，第三部分是变量，第四部分是语句。这三个部分是对语言层进行说明。

第二部分从整个程序的角度，包括构建类的考虑因素，创建子程序需要注意的地方，以及如何进行防御式编程。个人以为防御式编程是很重要的，不光是可以保证程序现在的正确性，同时也可以较长时期保证程序不至于出现大的问题。由于防御式编程，所以可以在出现问题之后，较快的确定问题所在甚至是处理部分问题。这个实现技术主要是异常处理机制，断言等等。实际上一个真正强大的软件大部分的逻辑应该是异常逻辑，只是解决正常工作情况的程序，不能称之为软件，其鲁棒性远远没有达到要求。

第三部分是变量，这是全书描述的最细微的单元。主要包括如果对变量命名，变量与数据的绑定时间，基本的数据类型以及一些不常见的数据类型，比如指针、全局变量等等。变量命名是有多种方法的，用哪种无所谓，关键是要统一。变量与数据的绑定时间，这个问题我以前没有系统考虑过。书中的观点是绑定时间越滞后，则系统越灵活。这个我赞同。硬编码到程序中的，是直接赋予数值的常量，除非修改源码，否则不变；编译时刻确定的，是一些静态变量；运行时间确定的，就难说了，可能是从I/O获得，也可能是从内存获得。其它是介绍基本数据类型，在此不赘述。

第四部分是语句，这是构建程序主体的基本构成单元，比变量又高了一级。这部分主要描述语句的组织结构，比如直线型、循环控制、条件控制、表驱动等。一般的方法比如条件循环等等，大部分情况下可见。表驱动，我是不常见的，应该是对程序逻辑的高度概括，并且高度灵活化。这个只在写编译器课程实践代码的时候简单运用过。

 

第五部分是代码改善，这部分包括以下几个主题，协同、测试、调试、重构、调整。这里的测试是开发者测试，应该是指单元测试了，现有很多合适的工具，比如NUnit、CppUnit、JUnit等等。调试主要难点在于寻找和定位问题，解决问题虽然也不容易，但需要的是远见，因为再不济，总会存在一种打补丁的方法可以临时解决问题。重构和代码调整是我近期需要关注并且不断提高自己的主题。这两个技术的运用，可以较好的弥补前期代码设计不足所带来的隐患。代码调整的目标是进行性能优化。这需要考虑方法以及后果，书中有一个很重要的观点是，往往表面看起来有效的优化却并不有效，尤其是你看似整洁不重复的代码，却还不如一个重复代码执行效率高。要达到这一步，需要在每次的调整后进行性能测试，以判定性能是否优化。

 

第六部分是系统考虑，这部分是对软件管理方面的考量，具体包括程序规模对构建的影响，如何去管理构建过程，如何集成模块，以及介绍软件构建的工具。这部分内容像是给Manager准备的哈，现在的我，需要在多个项目中逐步体会。

 

第七部分，全书最后一部分，讲述软件工艺。软件说到底，也就是一个产品，只不是产品的形式与一般不同。一部分是构建出来的可执行程序，一部分是完整的软件源码。对于源码的书写，就涉及到工艺了，不同层次的人写出来的代码是完全不一样的。水平高低暂且不论，单是注释的规范整齐程序，就可见一斑。这部分主要对代码的布局，如何写注释，个人性格对代码书写的影响等方面进行说明。全书最后一章是好书推荐。

 

OK。总结到此。之后在构建方面，我需要继续关注重构和代码调整一类的内容，以及系统架构等等。

